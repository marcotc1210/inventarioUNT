import React, { useMemo } from "react";
import {
  useReactTable,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  flexRender,
} from "@tanstack/react-table";

const Table = ({ headers = [], data = [] }) => {
  // Configuración de columnas basada en headers
  const columns = useMemo(
    () =>
      headers.map((header) => ({
        accessorKey: header.key,
        header: header.label,
      })),
    [headers]
  );

  // Configuración de la tabla
  const table = useReactTable({
    data,
    columns,
    initialState: {
      pagination: { pageIndex: 0, pageSize: 5 }, // Página inicial y tamaño
    },
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
  });

  return (
    <div className="p-0 bg-gray-100 rounded-xl shadow-md mt-4">
      {/* Bloque superior con título, filtro y paginación */}
      <div className="pt-4 px-8 flex items-center justify-between mb-4">
        <div className="flex items-center space-x-4">
          <span className="text-gray-600">Mostrar</span>
          <select className="border border-gray-300 rounded-md text-gray-600 px-2 py-1">
            <option>Columna</option>
            <option>Otra opción</option>
          </select>
        </div>

        {/* Controles de paginación */}
        <div className="flex items-center space-x-4 ml-auto">
          <button
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="text-gray-600 px-2 py-1 rounded-md bg-gray-200"
          >
            Anterior
          </button>
          <span>
            Página{" "}
            <strong>
              {table.getState().pagination.pageIndex + 1} de {table.getPageCount()}
            </strong>
          </span>
          <button
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="text-gray-600 px-2 py-1 rounded-md bg-gray-200"
          >
            Siguiente
          </button>
          <div>
            <span>Mostrar </span>
            <select
              value={table.getState().pagination.pageSize}
              onChange={(e) => table.setPageSize(Number(e.target.value))}
              className="border border-gray-300 rounded-md px-2 py-1"
            >
              {[5, 10, 20].map((size) => (
                <option key={size} value={size}>
                  {size}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full bg-white rounded-lg border border-gray-200">
          <thead className="bg-gray-200 text-gray-700">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th
                    key={header.id}
                    className="p-2 border-b border-gray-300 text-left cursor-pointer"
                    onClick={header.column.getToggleSortingHandler()}
                  >
                    {flexRender(header.column.columnDef.header, header.getContext())}
                    {header.column.getIsSorted() === "asc" && " 🔼"}
                    {header.column.getIsSorted() === "desc" && " 🔽"}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody className="text-gray-800">
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id} className="hover:bg-gray-100">
                {row.getVisibleCells().map((cell) => (
                  <td key={cell.id} className="p-2 border-b border-gray-300 text-left">
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>

      </div>

      <div className="bg-gray-100 h-8 md:h-10 rounded-xl rounded-t  "> </div>

    </div>

  );
};

export default Table;
